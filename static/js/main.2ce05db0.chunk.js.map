{"version":3,"sources":["lib/PlotContainers/PlotContainers.js","lib/AreaChartLeftPanel.jsx","lib/PlottingUtils.js","lib/AreaChart.jsx","lib/AreaChartYAxis.jsx","lib/DateVerticalGridLines.js","lib/index.js","lib/AreaChartBundle.jsx","index.js"],"names":["PlotContainer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","generateGridLayoutStyle","memoize_one","width","height","leftWidth","plotWidth","rightWidth","topHeight","plotHeight","bottomHeight","display","gridGap","gridTemplateColumns","gridTemplateRows","inherits","createClass","key","value","_this$props","props","children","style","react_default","a","createElement","className","Component","PlotSubContainer","React","Children","map","child","AreaChartLeftPanel","canvasW","canvasH","styles","leftPanel","panelHeight","panelWidth","backgroundColor","cpbLabel","position","top","left","color","fontWeight","PureComponent","toDomXCoord_Linear","minX","maxX","dataX","AreaChart","drawCPBChart","ctx","domX","canvas","dtWindow","data","lineWidth","strokeStyle","forEach","d","minY","maxY","dataY","domY","lineTo","stroke","fillStyle","fill","cpbChartCanvas","refs","cpbChartCtx","getContext","ref","AreaChartYAxis","toDomYCoord_Linear","drawYAxis","labels","moveTo","font","textBaseline","i","posDomY","fillText","cpbYAxisCanvas","cpbYAxisCtx","DateVerticalGridLines","createRef","rest","objectWithoutProperties","assign","draw","_this$props2","diffX","draw_memo","validFromDiffX","validToDiffX","rangeMinX","rangeMaxX","memo","_generateDateGrids","generateDateGrids","grids","startIndex","Math","max","bisect_right","endIndex","min","bisect_left","domXs","slice","x","current","clearRect","globalAlpha","verticalLinePlot","beginPath","round","AreaChartBundle","getDaysBetweenDates","d0","d1","x0","Date","x1","setHours","filteredData","timeSet","Set","timeArr","filter","o","time","has","add","push","minXInMSecs","maxXInMSecs","leftPanelGradShadow","LEFT_WIDTH","opacity","backgroundImage","mainPlotWrapDiv","zIndex","PlotContainers_PlotContainer","PlotContainers_PlotSubContainer","lib_AreaChartLeftPanel","lib_AreaChartYAxis","lib_DateVerticalGridLines","lib_AreaChart","App","handleSubmit","e","preventDefault","jsonStr","replace","s","substring","json","JSON","parse","state","setState","toConsumableArray","dataTypeToColorDict","MEDS","FLUSHES","TPN","FEEDS","lol434ra","xbo4334x","temp","handleRemoveBtnCLick","bind","assertThisInitialized","self","firstTime","setInterval","simulateDataChange","objectSpread","name","type","newMaxTime","newTemp","floor","random","newData","_this2","_this$state","Fragment","onSubmit","fontSize","placeholder","element","onClick","lib","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2ce05db0.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {memoize_one} from \"memoize\";\nimport \"./PlotContainers.css\";\n\nexport class PlotContainer extends Component{\n  render(){\n    let { children,width,height,\n          leftWidth,plotWidth,rightWidth,\n          topHeight,plotHeight,bottomHeight} = this.props;\n    let style = this.generateGridLayoutStyle( width,height,\n                                              leftWidth,plotWidth,rightWidth,\n                                              topHeight,plotHeight,bottomHeight);\n    return (\n      <div style={style} className=\"PlotContainers-positionRelative\">\n        {children}\n      </div>\n    )\n  }\n  \n  generateGridLayoutStyle = memoize_one((width,height,\n                          leftWidth,plotWidth,rightWidth,\n                          topHeight,plotHeight,bottomHeight)=>{\n    let style = { display:\"grid\",\n                  height:height,\n                  width:width,\n                  gridGap:0,\n                  gridTemplateColumns:`${leftWidth}px ${plotWidth}px ${rightWidth}px`,\n                  gridTemplateRows:`${topHeight}px ${plotHeight}px ${bottomHeight}px`\n                  };\n    return style;\n  })\n}\n\nexport const PlotSubContainer = (props)=>{\n  return (\n    <div className=\"PlotContainers-positionRelative\">\n      { props.children ? \n        React.Children.map(props.children,(child)=>\n          <div className=\"PlotContainers-positionAbsolute\">\n            {child}\n          </div>) :\n        null\n        }\n    </div>\n  );\n}\n\n","import React, { PureComponent } from \"react\";\n// import \"./TempChartLeftPanel.css\"\n\nclass AreaChartLeftPanel extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.canvasW\n        this.canvasH = this.props.canvasH\n    }\n\n    componentDidMount() {\n        // this.meterCanvas = this.refs.meterCanvas\n        // this.meterCtx = this.meterCanvas.getContext(\"2d\")\n    }\n\n    componentDidUpdate() {\n\n    }\n\n    render() {\n        let { panelHeight, panelWidth } = this.props\n\n        const styles = {\n            leftPanel: {\n                height: panelHeight + \"px\",\n                width: panelWidth + \"px\",\n                backgroundColor: \"#fffcec\"\n            },\n            cpbLabel: {\n                position: \"absolute\",\n                top: \"25%\",\n                left: \"10%\",\n                color: '#373c62',\n                fontWeight: '800'\n            }\n        }\n\n        return (\n            <div className=\"cpb-left-panel\"\n                style={styles.leftPanel}>\n                <div className=\"cpb-label\"\n                    style={styles.cpbLabel}> CPB </div>\n            </div>\n        )\n    }\n}\n\nexport default AreaChartLeftPanel","//height: canvas px\n// minY: lowest value\n// maxY: highest value\n// dataY: value\nexport function toDomYCoord_Linear(height, minY, maxY, dataY) {\n    return height - (dataY - minY) / ((maxY - minY) / height);\n}\n\nexport function fromDomYCoord_Linear(height, minY, maxY, domY) {\n    return (height - domY) * ((maxY - minY) / height) + minY;\n}\n\nexport function toDomXCoord_Linear(width, minX, maxX, dataX) {\n    return (dataX - minX) / ((maxX - minX) / width);\n}\n\nexport function fromDomXCoord_Linear(width, minX, maxX, domX) {\n    return domX * ((maxX - minX) / width) + minX;\n}","import React, { PureComponent } from \"react\";\n// import \"./TempChart.css\"\nimport {\n    toDomYCoord_Linear,\n    toDomXCoord_Linear,\n    fromDomXCoord_Linear\n} from \"./PlottingUtils\"\n\nclass AreaChart extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.width\n        this.canvasH = this.props.height\n    }\n\n    componentDidMount() {\n        this.cpbChartCanvas = this.refs.cpbChartCanvas\n        this.cpbChartCtx = this.cpbChartCanvas.getContext(\"2d\")\n        this.drawCPBChart(this.cpbChartCtx)\n    }\n\n    componentDidUpdate() {\n        this.drawCPBChart(this.cpbChartCtx)\n    }\n\n    drawCPBChart = (ctx) => {\n        // let { minX, maxX, minY, maxY, data } = this.props\n        ctx.canvas.width = ctx.canvas.width\n        let domX\n        let minX = this.props.dtWindow[0] / 1000\n        let maxX = this.props.dtWindow[1] / 1000\n        let height = this.canvasH\n        let data = this.props.data\n\n        // first plot the stroke\n        ctx.lineWidth = 4\n        ctx.strokeStyle = \"rgba(128,128,128,0.7)\"\n        data.forEach(d => {\n            domX = toDomXCoord_Linear(this.canvasW, minX, maxX, d[\"time\"])\n            let domY = toDomYCoord_Linear(this.canvasH, 12, 43, d[\"temp\"])\n            ctx.lineTo(domX, domY)\n        })\n        ctx.stroke()\n        // now define the bottom of the filled area\n        const maxY = height; //Math.max.apply(null, pts.map(pt=>pt.y));\n        // draw the missing parts\n        domX = toDomXCoord_Linear(this.canvasW, minX, maxX, data[data.length - 1][\"time\"])\n        ctx.lineTo(domX, maxY); // bottom-right\n        domX = toDomXCoord_Linear(this.canvasW, minX, maxX, data[0][\"time\"])\n        ctx.lineTo(domX, maxY); // bottom-left\n        ctx.fillStyle = \"rgba(192,192,192,0.4)\"\n        ctx.fill(); // will close the path for us\n    }\n\n    render() {\n        // let minXInSecs = minX / 1000, maxXInSecs = maxX / 1000\n        return (\n            <canvas\n                className=\"cpb-chart-canvas\"\n                ref=\"cpbChartCanvas\"\n                width={this.canvasW}\n                height={this.canvasH}\n            />\n        )\n    }\n}\n\nexport default AreaChart","import React, { PureComponent } from \"react\";\n\nclass AreaChartYAxis extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.canvasW\n        this.canvasH = this.props.canvasH\n        this.minY = this.props.minY\n        this.maxY = this.props.maxY\n    }\n\n    componentDidMount() {\n        this.cpbYAxisCanvas = this.refs.cpbYAxisCanvas\n        this.cpbYAxisCtx = this.cpbYAxisCanvas.getContext(\"2d\")\n\n        this.drawYAxis(this.cpbYAxisCtx);\n\n    }\n\n    componentDidUpdate() {\n        this.minY = this.props.minY\n        this.maxY = this.props.maxY\n        this.drawYAxis(this.cpbYAxisCtx);\n    }\n\n    toDomYCoord_Linear = (height, minY, maxY, dataY) => {\n        return height - (dataY - minY) / ((maxY - minY) / height);\n    }\n\n    drawYAxis = (ctx) => {\n        let labels = [36, 18]\n        // clear canvas\n        ctx.canvas.width = ctx.canvas.width\n\n        // draw the y-axis line\n        ctx.lineWidth = 3\n        ctx.moveTo(this.canvasW, 5)\n        ctx.lineTo(this.canvasW, this.canvasH - 5)\n        ctx.stroke()\n\n        // label styling\n        ctx.font = \"600 14px MuseoSans\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = '#373c62'\n\n        for (let i = 0; i < labels.length; i++) {\n            let posDomY = this.toDomYCoord_Linear(this.canvasH, 12, 43, labels[i])\n            // ctx.moveTo(this.canvasW - 10, posDomY)\n            // ctx.lineTo(this.canvasW, posDomY)\n            ctx.fillText(labels[i], this.canvasW - 25, posDomY)\n        }\n        ctx.stroke()\n    }\n\n    render() {\n        const styles = {\n            canvas: {\n                position: \"absolute\"\n            }\n        }\n\n        return (\n            <canvas\n                className=\"cpb-y-axis\"\n                ref=\"cpbYAxisCanvas\"\n                style={styles.canvas}\n                width={this.canvasW}\n                height={this.canvasH}\n            />\n\n        )\n    }\n}\n\nexport default AreaChartYAxis","import React, { PureComponent } from \"react\";\nimport { bisect_left, bisect_right } from \"bisect\";\nimport { toDomXCoord_Linear, generateDateGrids } from \"plot-utils\";\n\nclass DateVerticalGridLines extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  render() {\n    let { width, height, minX, maxX,\n      ...rest } = this.props;\n    return (\n      <canvas ref={this.ref} width={width} height={height} {...rest}></canvas>\n    );\n  }\n\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let { minX, maxX, width } = this.props;\n    let diffX = maxX - minX;\n    // Generate grid if needed\n    this.draw_memo = this.draw_memo || { validFromDiffX: 0, validToDiffX: -1, rangeMinX: 0, rangeMaxX: -1 };\n    let memo = this.draw_memo;\n    if (memo.validFromDiffX > diffX ||\n      diffX > memo.validToDiffX ||\n      memo.rangeMinX > minX ||\n      maxX > memo.rangeMaxX\n    ) {\n      memo.rangeMinX = minX - 10 * diffX;\n      memo.rangeMaxX = maxX + 10 * diffX;\n      let { grids, validFromDiffX, validToDiffX } = generateDateGrids(minX, maxX, memo.rangeMinX, memo.rangeMaxX);\n      memo.validFromDiffX = validFromDiffX;\n      memo.validToDiffX = validToDiffX;\n      memo.grids = grids;\n    }\n    // Filter\n    let startIndex = Math.max(0, bisect_right(memo.grids, minX));\n    let endIndex = Math.min(memo.grids.length - 1, bisect_left(memo.grids, maxX));\n    let domXs = memo.grids.slice(startIndex, endIndex + 1).map((x) => toDomXCoord_Linear(width, minX, maxX, x));\n    // Draw\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, width, 400);\n    ctx.globalAlpha = 0.1;\n    this.verticalLinePlot(ctx, width, 400, domXs);\n  }\n\n  verticalLinePlot(ctx, width, height, domXs) {\n    let x = null;\n    let c = null;\n    ctx.beginPath();\n    for (let i = 0; i < domXs.length; i++) {\n      x = Math.round(domXs[i]);\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n    }\n    ctx.stroke();\n  }\n}\n\nexport default DateVerticalGridLines;\n","import AreaChartBundle from \"./AreaChartBundle\";\nexport default AreaChartBundle;","import React, { PureComponent } from \"react\";\n// import \"./TempChartLeftPanel.css\"\nimport { PlotContainer, PlotSubContainer } from \"./PlotContainers/PlotContainers\";\nimport AreaChartLeftPanel from \"./AreaChartLeftPanel\";\nimport AreaChart from \"./AreaChart\";\nimport AreaChartYAxis from \"./AreaChartYAxis\";\nimport DateVerticalGridLines from \"./DateVerticalGridLines\";\n\nconst minY = 0;\nconst maxY = 200;\nconst LEFT_WIDTH = 200\nconst RIGHT_WIDTH = 0\nconst TOP_HEIGHT = 0\nconst BOTTOM_HEIGHT = 0\n\nclass AreaChartBundle extends PureComponent {\n    filterDataToDtWindow(data) {\n        let minX = this.props.dtWindow[0] / 1000\n        let maxX = this.props.dtWindow[1] / 1000\n        let filteredData = data\n        let timeSet = new Set()\n        let timeArr = []\n\n        if (data) {\n            if (minX) {\n                // filter out the data that is within the dtWindow range\n                filteredData = filteredData.filter(function (o) {\n                    if (o.time <= maxX && o.time >= minX) {\n                        if (!timeSet.has(o.time)) {\n                            timeSet.add(o.time)\n                            timeArr.push(o.time)\n                        }\n                    }\n                    return o.time <= maxX && o.time >= minX\n                })\n            }\n        }\n\n        return [filteredData, timeArr]\n    }\n\n    // unix time in ms\n    getDaysBetweenDates = (d0, d1) => {\n        var msPerDay = 8.64e7\n\n        // Copy dates so don't mess them up\n        var x0 = new Date(d0)\n        var x1 = new Date(d1)\n\n        // Set to noon - avoid DST errors\n        x0.setHours(12, 0, 0)\n        x1.setHours(12, 0, 0)\n\n        // Round to remove daylight saving errors\n        return Math.round((x1 - x0) / msPerDay)\n    }\n\n    render() {\n        let { dtWindow, width, height, data } = this.props\n        let plotWidth = width - LEFT_WIDTH - RIGHT_WIDTH\n        let plotHeight = height - TOP_HEIGHT - BOTTOM_HEIGHT\n        let minXInMSecs = 0, maxXInMSecs = 0\n\n        if (dtWindow) {\n            minXInMSecs = dtWindow[0]\n            maxXInMSecs = dtWindow[1]\n        }\n\n        const styles = {\n            leftPanelGradShadow: {\n                position: \"absolute\",\n                top: 0,\n                left: LEFT_WIDTH - 52,\n                height: height,\n                width: 70,\n                opacity: 1,\n                backgroundImage: \"linear-gradient(to right, black, rgba(255,255,255,0))\"\n            },\n            mainPlotWrapDiv: {\n                zIndex: -1\n            }\n        }\n        // data = this.filterDataToDtWindow(data)\n\n        return (\n            <PlotContainer width={width} height={height}\n                leftWidth={LEFT_WIDTH} plotWidth={plotWidth} rightWidth={RIGHT_WIDTH}\n                topHeight={TOP_HEIGHT} plotHeight={plotHeight} bottomHeight={BOTTOM_HEIGHT} >\n                {/*Row TOP*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Row PLOT*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                    <div style={styles.leftPanelGradShadow}>\n                    </div>\n                    <AreaChartLeftPanel panelWidth={200} panelHeight={50} />\n                    <AreaChartYAxis canvasH={50} canvasW={LEFT_WIDTH} />\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n                <div style={styles.mainPlotWrapDiv}>\n                    <PlotSubContainer>\n                        {/* Main plot area interaction */}\n                        <DateVerticalGridLines width={plotWidth} height={plotHeight} minX={minXInMSecs} maxX={maxXInMSecs} />\n                        <AreaChart data={data} width={plotWidth} height={plotHeight} dtWindow={dtWindow} />\n                    </PlotSubContainer>\n                </div>\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Row BOTTOM*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Other stuffs that ignore grid layut*/}\n            </PlotContainer>\n        )\n    }\n}\n\nexport default AreaChartBundle","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport AreaChartBundle from \"./lib\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.dataTypeToColorDict = {\n            MEDS: \"#C2EEF8\",\n            FLUSHES: \"#5DD2EF\",\n            TPN: \"#84A5D5\",\n            FEEDS: \"#A3DBDC\",\n            lol434ra: \"#C13BDA\",\n            xbo4334x: \"#613BFA\"\n        }\n\n        this.state = {\n            data: [\n                { \"time\": 1509426000, \"temp\": 35 },\n                { \"time\": 1509429600, \"temp\": 34.5 },\n                { \"time\": 1509433200, \"temp\": 34 },\n                { \"time\": 1509436800, \"temp\": 33.5 },\n                { \"time\": 1509440400, \"temp\": 33 },\n                { \"time\": 1509444000, \"temp\": 32.5 },\n                { \"time\": 1509447600, \"temp\": 32 },\n                { \"time\": 1509451200, \"temp\": 31.5 },\n                { \"time\": 1509454800, \"temp\": 31 },\n                { \"time\": 1509458400, \"temp\": 30.5 },\n                { \"time\": 1509462000, \"temp\": 30 },\n                { \"time\": 1509465600, \"temp\": 29.5 },\n                { \"time\": 1509469200, \"temp\": 29 },\n                { \"time\": 1509472800, \"temp\": 28.5 },\n                { \"time\": 1509476400, \"temp\": 28 },\n                { \"time\": 1509480000, \"temp\": 27.5 },\n                { \"time\": 1509483600, \"temp\": 27 },\n                { \"time\": 1509487200, \"temp\": 26.5 },\n                { \"time\": 1509490800, \"temp\": 26.4 },\n                { \"time\": 1509494400, \"temp\": 26.4 },\n                { \"time\": 1509498000, \"temp\": 26.4 },\n                { \"time\": 1509501600, \"temp\": 26.5 },\n                { \"time\": 1509505200, \"temp\": 26.8 },\n                { \"time\": 1509508800, \"temp\": 27 },\n                { \"time\": 1509512400, \"temp\": 27.5 },\n                { \"time\": 1509516000, \"temp\": 28 },\n                { \"time\": 1509519600, \"temp\": 28.5 },\n                { \"time\": 1509523200, \"temp\": 29 },\n                { \"time\": 1509526800, \"temp\": 29.5 },\n                { \"time\": 1509530400, \"temp\": 30 },\n                { \"time\": 1509534000, \"temp\": 30.5 },\n                { \"time\": 1509537600, \"temp\": 31 },\n                { \"time\": 1509541200, \"temp\": 31.5 },\n                { \"time\": 1509544800, \"temp\": 32 },\n                { \"time\": 1509548400, \"temp\": 32.5 },\n                { \"time\": 1509552000, \"temp\": 33 },\n                { \"time\": 1509555600, \"temp\": 33.5 },\n                { \"time\": 1509559200, \"temp\": 34 },\n                { \"time\": 1509562800, \"temp\": 34.5 },\n                { \"time\": 1509566400, \"temp\": 35 },\n                { \"time\": 1509570000, \"temp\": 35 },\n                { \"time\": 1509573600, \"temp\": 35 },\n                { \"time\": 1509577200, \"temp\": 35 },\n                { \"time\": 1509580800, \"temp\": 35 }],\n            dtWindow: [1508814800000, 1510117200000],\n            width: 1200,\n            height: 50\n        }\n\n        this.handleRemoveBtnCLick = this.handleRemoveBtnCLick.bind(this)\n    }\n\n    componentDidMount() {\n        let self = this\n        let firstTime = true\n        setInterval(function () {\n            self.simulateDataChange(firstTime)\n            firstTime = false\n        }, 1000)\n    }\n\n    handleRemoveBtnCLick() {\n        let data = this.state.data\n        data = data.slice(0, -1)\n        this.setState({\n            ...this.state,\n            data: [\n                { name: \"Administered Medications\", time: 1456293058, type: \"Intake\", value: 1 },\n                { name: \"Blood Products\", time: 1456293058, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Urine Output\", time: 1456293058, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293058, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Continuous Medications\", time: 1456293058, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Blood Products\", time: 1456293060, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Urine Output\", time: 1456293060, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Continuous Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n            ],\n        })\n    }\n\n    handleSubmit = (e) => {\n        if (e) e.preventDefault()\n        const data = this.data.value\n        var jsonStr = data.replace(/(\\w+:)|(\\w+ :)/g, function (s) {\n            return '\"' + s.substring(0, s.length - 1) + '\":'\n        })\n\n        let json = JSON.parse(jsonStr)\n        let newData = this.state.data\n        newData.push(json)\n        this.setState({\n            data: [...this.state.data, json]\n        })\n    }\n\n    simulateDataChange(firstTime) {\n        let newMaxTime\n        if (firstTime) {\n            newMaxTime = (this.state.data[this.state.data.length - 1][\"time\"]) + 3600\n        } else {\n            newMaxTime = this.state.data[this.state.data.length - 1][\"time\"] + 3600\n        }\n\n        let newTemp = {\n            time: newMaxTime,\n            temp: (Math.floor(Math.random() * 20) + 20)\n        }\n\n        let newData = this.state.data\n        newData = newData.slice(2)\n        newData.push(newTemp)\n\n        this.setState({\n            ...this.state,\n            data: [...newData, newTemp],\n            dtWindow: [this.state.data[0][\"time\"] * 1000, newMaxTime * 1000 - 3600000]\n        })\n    }\n\n    render() {\n        let { data, dtWindow, width, height } = this.state\n        return (\n            <>\n                <div>Pass in data in the form: {' { value: 1, type: \"MEDS\" } '}</div>\n                <form onSubmit={this.handleSubmit}>\n                    <input style={{\n                        height: \"50px\",\n                        width: \"50%\",\n                        fontSize: \"14pt\"\n                    }} placeholder=\"data\" type=\"text\" ref={(element) => { this.data = element }} />\n                    <button>ADD DATA</button>\n                </form>\n                <button onClick={this.handleRemoveBtnCLick}>REMOVE DATA</button>\n                <AreaChartBundle\n                    data={data}\n                    dtWindow={dtWindow}\n                    width={width}\n                    height={height} />\n            </>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}