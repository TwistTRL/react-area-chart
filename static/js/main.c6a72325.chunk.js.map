{"version":3,"sources":["lib/PlotContainers/PlotContainers.js","lib/AreaChartLeftPanel.jsx","lib/PlottingUtils.js","lib/AreaChart.jsx","lib/AreaChartYAxis.jsx","lib/DateVerticalGridLines.js","lib/index.js","lib/AreaChartBundle.jsx","index.js"],"names":["PlotContainer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","generateGridLayoutStyle","memoize_one","width","height","leftWidth","plotWidth","rightWidth","topHeight","plotHeight","bottomHeight","display","gridGap","gridTemplateColumns","gridTemplateRows","inherits","createClass","key","value","_this$props","props","children","style","react_default","a","createElement","className","Component","PlotSubContainer","React","Children","map","child","AreaChartLeftPanel","canvasW","canvasH","panelHeight","panelWidth","label","styles","leftPanel","backgroundColor","colorString","areaChartLabel","marginLeft","lineHeight","color","fontWeight","fontFamily","PureComponent","toDomXCoord_Linear","minX","maxX","dataX","AreaChart","drawCPBChart","ctx","domX","canvas","dtWindow","data","yRange","lineWidth","strokeStyle","forEach","d","minY","maxY","dataY","domY","lineTo","stroke","fillStyle","fill","areaChartCanvas","refs","areaChartCtx","getContext","ref","AreaChartYAxis","toDomYCoord_Linear","drawYAxis","moveTo","font","textBaseline","posDomY","fillText","areaChartYAxisCanvas","areaChartYAxisCtx","position","DateVerticalGridLines","createRef","rest","objectWithoutProperties","assign","draw","_this$props2","diffX","draw_memo","validFromDiffX","validToDiffX","rangeMinX","rangeMaxX","memo","_generateDateGrids","generateDateGrids","grids","startIndex","Math","max","bisect_right","endIndex","min","bisect_left","domXs","slice","x","current","clearRect","globalAlpha","verticalLinePlot","beginPath","i","round","AreaChartBundle","getDaysBetweenDates","d0","d1","x0","Date","x1","setHours","filteredData","timeSet","Set","timeArr","filter","o","time","has","add","push","areaChartBackgroundColor","minXInMSecs","maxXInMSecs","leftPanelGradShadow","top","left","LEFT_WIDTH","opacity","backgroundImage","mainPlotWrapDiv","zIndex","PlotContainers_PlotContainer","PlotContainers_PlotSubContainer","lib_AreaChartLeftPanel","lib_AreaChartYAxis","lib_DateVerticalGridLines","lib_AreaChart","App","handleSubmit","e","preventDefault","jsonStr","replace","s","substring","json","JSON","parse","state","setState","toConsumableArray","handleRemoveBtnCLick","bind","assertThisInitialized","self","firstTime","setInterval","simulateDataChange","objectSpread","name","type","newMaxTime","newTemp","floor","random","newData","_this2","_this$state","dataClone","Fragment","onSubmit","fontSize","placeholder","element","onClick","lib","reverse","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c6a72325.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {memoize_one} from \"memoize\";\nimport \"./PlotContainers.css\";\n\nexport class PlotContainer extends Component{\n  render(){\n    let { children,width,height,\n          leftWidth,plotWidth,rightWidth,\n          topHeight,plotHeight,bottomHeight} = this.props;\n    let style = this.generateGridLayoutStyle( width,height,\n                                              leftWidth,plotWidth,rightWidth,\n                                              topHeight,plotHeight,bottomHeight);\n    return (\n      <div style={style} className=\"PlotContainers-positionRelative\">\n        {children}\n      </div>\n    )\n  }\n  \n  generateGridLayoutStyle = memoize_one((width,height,\n                          leftWidth,plotWidth,rightWidth,\n                          topHeight,plotHeight,bottomHeight)=>{\n    let style = { display:\"grid\",\n                  height:height,\n                  width:width,\n                  gridGap:0,\n                  gridTemplateColumns:`${leftWidth}px ${plotWidth}px ${rightWidth}px`,\n                  gridTemplateRows:`${topHeight}px ${plotHeight}px ${bottomHeight}px`\n                  };\n    return style;\n  })\n}\n\nexport const PlotSubContainer = (props)=>{\n  return (\n    <div className=\"PlotContainers-positionRelative\">\n      { props.children ? \n        React.Children.map(props.children,(child)=>\n          <div className=\"PlotContainers-positionAbsolute\">\n            {child}\n          </div>) :\n        null\n        }\n    </div>\n  );\n}\n\n","import React, { PureComponent } from \"react\";\n// import \"./TempChartLeftPanel.css\"\n\nclass AreaChartLeftPanel extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.canvasW\n        this.canvasH = this.props.canvasH\n    }\n\n    render() {\n        let { panelHeight, panelWidth, label, colorString } = this.props\n\n        const styles = {\n            leftPanel: {\n                height: panelHeight + \"px\",\n                width: panelWidth + \"px\",\n                backgroundColor: colorString\n            },\n            areaChartLabel: {\n                marginLeft: \"15%\",\n                lineHeight: panelHeight + \"px\",\n                color: '#373c62',\n                fontWeight: '800',\n                fontFamily: 'MuseoSans, Sans'\n            }\n        }\n\n        return (\n            <div className=\"area-chart-left-panel\"\n                style={styles.leftPanel}>\n                <div className=\"area-chart-label\"\n                    style={styles.areaChartLabel}> {label} </div>\n            </div>\n        )\n    }\n}\n\nexport default AreaChartLeftPanel","//height: canvas px\n// minY: lowest value\n// maxY: highest value\n// dataY: value\nexport function toDomYCoord_Linear(height, minY, maxY, dataY) {\n    return height - (dataY - minY) / ((maxY - minY) / height);\n}\n\nexport function fromDomYCoord_Linear(height, minY, maxY, domY) {\n    return (height - domY) * ((maxY - minY) / height) + minY;\n}\n\nexport function toDomXCoord_Linear(width, minX, maxX, dataX) {\n    return (dataX - minX) / ((maxX - minX) / width);\n}\n\nexport function fromDomXCoord_Linear(width, minX, maxX, domX) {\n    return domX * ((maxX - minX) / width) + minX;\n}","import React, { PureComponent } from \"react\";\n// import \"./TempChart.css\"\nimport {\n    toDomYCoord_Linear,\n    toDomXCoord_Linear,\n    fromDomXCoord_Linear\n} from \"./PlottingUtils\"\n\nclass AreaChart extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.width\n        this.canvasH = this.props.height\n    }\n\n    componentDidMount() {\n        this.areaChartCanvas = this.refs.areaChartCanvas\n        this.areaChartCtx = this.areaChartCanvas.getContext(\"2d\")\n        this.drawCPBChart(this.areaChartCtx)\n    }\n\n    componentDidUpdate() {\n        this.drawCPBChart(this.areaChartCtx)\n    }\n\n    drawCPBChart = (ctx) => {\n        // let { minX, maxX, minY, maxY, data } = this.props\n        ctx.canvas.width = ctx.canvas.width\n        let domX\n        let minX = this.props.dtWindow[0] / 1000\n        let maxX = this.props.dtWindow[1] / 1000\n        let height = this.canvasH\n        let data = this.props.data\n        let yRange = this.props.yRange\n\n        // first plot the stroke\n        ctx.lineWidth = 4\n        ctx.strokeStyle = \"rgba(128,128,128,0.7)\"\n        data.forEach(d => {\n            domX = toDomXCoord_Linear(this.canvasW, minX, maxX, d[\"time\"])\n            let domY = toDomYCoord_Linear(this.canvasH, yRange[0] - 5, yRange[1] + 5, d[\"value\"])\n            ctx.lineTo(domX, domY)\n        })\n        ctx.stroke()\n        // now define the bottom of the filled area\n        const maxY = height; //Math.max.apply(null, pts.map(pt=>pt.y));\n        // draw the missing parts\n        domX = toDomXCoord_Linear(this.canvasW, minX, maxX, data[data.length - 1][\"time\"])\n        ctx.lineTo(domX, maxY); // bottom-right\n        domX = toDomXCoord_Linear(this.canvasW, minX, maxX, data[0][\"time\"])\n        ctx.lineTo(domX, maxY); // bottom-left\n        ctx.fillStyle = \"rgba(192,192,192,0.4)\"\n        ctx.fill(); // will close the path for us\n    }\n\n    render() {\n        // let minXInSecs = minX / 1000, maxXInSecs = maxX / 1000\n        return (\n            <canvas\n                className=\"area-chart-canvas\"\n                ref=\"areaChartCanvas\"\n                width={this.canvasW}\n                height={this.canvasH}\n            />\n        )\n    }\n}\n\nexport default AreaChart","import React, { PureComponent } from \"react\";\n\nclass AreaChartYAxis extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.canvasW\n        this.canvasH = this.props.canvasH\n        this.minY = this.props.minY\n        this.maxY = this.props.maxY\n    }\n\n    componentDidMount() {\n        this.areaChartYAxisCanvas = this.refs.areaChartYAxisCanvas\n        this.areaChartYAxisCtx = this.areaChartYAxisCanvas.getContext(\"2d\")\n        this.drawYAxis(this.areaChartYAxisCtx);\n    }\n\n    componentDidUpdate() {\n        this.minY = this.props.minY\n        this.maxY = this.props.maxY\n        this.drawYAxis(this.areaChartYAxisCtx);\n    }\n\n    toDomYCoord_Linear = (height, minY, maxY, dataY) => {\n        return height - (dataY - minY) / ((maxY - minY) / height);\n    }\n\n    drawYAxis = (ctx) => {\n        let yRange = this.props.yRange\n        // clear canvas\n        ctx.canvas.width = ctx.canvas.width\n\n        // draw the y-axis line\n        ctx.lineWidth = 3\n        ctx.moveTo(this.canvasW, 5)\n        ctx.lineTo(this.canvasW, this.canvasH - 5)\n        ctx.stroke()\n\n        // label styling\n        ctx.font = \"600 14px MuseoSans, Sans\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = '#373c62'\n\n        // draw the label\n        let posDomY = this.toDomYCoord_Linear(this.canvasH, yRange[0] - 5, yRange[1] + 5, yRange[0])\n        ctx.fillText(yRange[0], this.canvasW - 25, posDomY)\n        posDomY = this.toDomYCoord_Linear(this.canvasH, yRange[0] - 5, yRange[1] + 5, yRange[1])\n        ctx.fillText(yRange[1], this.canvasW - 25, posDomY)\n\n        ctx.stroke()\n    }\n\n    render() {\n        const styles = {\n            canvas: {\n                position: \"absolute\"\n            }\n        }\n\n        return (\n            <canvas\n                className=\"area-chart-y-axis\"\n                ref=\"areaChartYAxisCanvas\"\n                style={styles.canvas}\n                width={this.canvasW}\n                height={this.canvasH}\n            />\n        )\n    }\n}\n\nexport default AreaChartYAxis","import React, { PureComponent } from \"react\";\nimport { bisect_left, bisect_right } from \"bisect\";\nimport { toDomXCoord_Linear, generateDateGrids } from \"plot-utils\";\n\nclass DateVerticalGridLines extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  render() {\n    let { width, height, minX, maxX,\n      ...rest } = this.props;\n    return (\n      <canvas ref={this.ref} width={width} height={height} {...rest}></canvas>\n    );\n  }\n\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let { minX, maxX, width } = this.props;\n    let diffX = maxX - minX;\n    // Generate grid if needed\n    this.draw_memo = this.draw_memo || { validFromDiffX: 0, validToDiffX: -1, rangeMinX: 0, rangeMaxX: -1 };\n    let memo = this.draw_memo;\n    if (memo.validFromDiffX > diffX ||\n      diffX > memo.validToDiffX ||\n      memo.rangeMinX > minX ||\n      maxX > memo.rangeMaxX\n    ) {\n      memo.rangeMinX = minX - 10 * diffX;\n      memo.rangeMaxX = maxX + 10 * diffX;\n      let { grids, validFromDiffX, validToDiffX } = generateDateGrids(minX, maxX, memo.rangeMinX, memo.rangeMaxX);\n      memo.validFromDiffX = validFromDiffX;\n      memo.validToDiffX = validToDiffX;\n      memo.grids = grids;\n    }\n    // Filter\n    let startIndex = Math.max(0, bisect_right(memo.grids, minX));\n    let endIndex = Math.min(memo.grids.length - 1, bisect_left(memo.grids, maxX));\n    let domXs = memo.grids.slice(startIndex, endIndex + 1).map((x) => toDomXCoord_Linear(width, minX, maxX, x));\n    // Draw\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, width, 400);\n    ctx.globalAlpha = 0.1;\n    this.verticalLinePlot(ctx, width, 400, domXs);\n  }\n\n  verticalLinePlot(ctx, width, height, domXs) {\n    let x = null;\n    let c = null;\n    ctx.beginPath();\n    for (let i = 0; i < domXs.length; i++) {\n      x = Math.round(domXs[i]);\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n    }\n    ctx.stroke();\n  }\n}\n\nexport default DateVerticalGridLines;\n","import AreaChartBundle from \"./AreaChartBundle\";\nexport default AreaChartBundle;","import React, { PureComponent } from \"react\";\n// import \"./TempChartLeftPanel.css\"\nimport { PlotContainer, PlotSubContainer } from \"./PlotContainers/PlotContainers\";\nimport AreaChartLeftPanel from \"./AreaChartLeftPanel\";\nimport AreaChart from \"./AreaChart\";\nimport AreaChartYAxis from \"./AreaChartYAxis\";\nimport DateVerticalGridLines from \"./DateVerticalGridLines\";\nimport PropTypes from 'prop-types';\n\nconst minY = 0;\nconst maxY = 200;\nconst LEFT_WIDTH = 200\nconst RIGHT_WIDTH = 0\nconst TOP_HEIGHT = 0\nconst BOTTOM_HEIGHT = 0\n\nclass AreaChartBundle extends PureComponent {\n    filterDataToDtWindow(data) {\n        let minX = this.props.dtWindow[0] / 1000\n        let maxX = this.props.dtWindow[1] / 1000\n        let filteredData = data\n        let timeSet = new Set()\n        let timeArr = []\n\n        if (data) {\n            if (minX) {\n                // filter out the data that is within the dtWindow range\n                filteredData = filteredData.filter(function (o) {\n                    if (o.time <= maxX && o.time >= minX) {\n                        if (!timeSet.has(o.time)) {\n                            timeSet.add(o.time)\n                            timeArr.push(o.time)\n                        }\n                    }\n                    return o.time <= maxX && o.time >= minX\n                })\n            }\n        }\n\n        return [filteredData, timeArr]\n    }\n\n    // unix time in ms\n    getDaysBetweenDates = (d0, d1) => {\n        var msPerDay = 8.64e7\n\n        // Copy dates so don't mess them up\n        var x0 = new Date(d0)\n        var x1 = new Date(d1)\n\n        // Set to noon - avoid DST errors\n        x0.setHours(12, 0, 0)\n        x1.setHours(12, 0, 0)\n\n        // Round to remove daylight saving errors\n        return Math.round((x1 - x0) / msPerDay)\n    }\n\n    render() {\n        let { dtWindow, width, height, yRange, data, label, colorString, areaChartBackgroundColor } = this.props\n        let plotWidth = width - LEFT_WIDTH - RIGHT_WIDTH\n        let plotHeight = height - TOP_HEIGHT - BOTTOM_HEIGHT\n        let minXInMSecs = 0, maxXInMSecs = 0\n\n        if (dtWindow) {\n            minXInMSecs = dtWindow[0]\n            maxXInMSecs = dtWindow[1]\n        }\n\n        const styles = {\n            leftPanelGradShadow: {\n                position: \"absolute\",\n                top: 0,\n                left: LEFT_WIDTH - 52,\n                height: height,\n                width: 70,\n                opacity: 1,\n                backgroundImage: \"linear-gradient(to right, black, rgba(255,255,255,0))\"\n            },\n            mainPlotWrapDiv: {\n                zIndex: -1,\n                backgroundColor: areaChartBackgroundColor\n            }\n        }\n        // data = this.filterDataToDtWindow(data)\n\n        return (\n            <PlotContainer width={width} height={height}\n                leftWidth={LEFT_WIDTH} plotWidth={plotWidth} rightWidth={RIGHT_WIDTH}\n                topHeight={TOP_HEIGHT} plotHeight={plotHeight} bottomHeight={BOTTOM_HEIGHT} >\n                {/*Row TOP*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Row PLOT*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                    <div style={styles.leftPanelGradShadow}>\n                    </div>\n                    <AreaChartLeftPanel label={label} colorString={colorString} panelWidth={LEFT_WIDTH} panelHeight={height} />\n                    <AreaChartYAxis canvasH={height} canvasW={LEFT_WIDTH} yRange={yRange} />\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n                <div style={styles.mainPlotWrapDiv}>\n                    <PlotSubContainer>\n                        {/* Main plot area interaction */}\n                        <DateVerticalGridLines width={plotWidth} height={plotHeight} minX={minXInMSecs} maxX={maxXInMSecs} />\n                        <AreaChart data={data} yRange={yRange} width={plotWidth} height={plotHeight} dtWindow={dtWindow} />\n                    </PlotSubContainer>\n                </div>\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Row BOTTOM*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Other stuffs that ignore grid layut*/}\n            </PlotContainer>\n        )\n    }\n}\n\nAreaChartBundle.propTypes = {\n    data: PropTypes.array.isRequired,\n    dtWindow: PropTypes.array.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    yRange: PropTypes.array.isRequired,\n    label: PropTypes.string.isRequired,\n    colorString: PropTypes.string.isRequired,\n    areaChartBackgroundColor: PropTypes.string.isRequired\n}\n\nexport default AreaChartBundle","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport AreaChartBundle from \"./lib\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [\n                { \"time\": 1509426000, \"value\": 10 },\n                { \"time\": 1509429600, \"value\": 34.5 },\n                { \"time\": 1509433200, \"value\": 34 },\n                { \"time\": 1509436800, \"value\": 33.5 },\n                { \"time\": 1509440400, \"value\": 33 },\n                { \"time\": 1509444000, \"value\": 32.5 },\n                { \"time\": 1509447600, \"value\": 32 },\n                { \"time\": 1509451200, \"value\": 31.5 },\n                { \"time\": 1509454800, \"value\": 31 },\n                { \"time\": 1509458400, \"value\": 30.5 },\n                { \"time\": 1509462000, \"value\": 30 },\n                { \"time\": 1509465600, \"value\": 29.5 },\n                { \"time\": 1509469200, \"value\": 29 },\n                { \"time\": 1509472800, \"value\": 28.5 },\n                { \"time\": 1509476400, \"value\": 28 },\n                { \"time\": 1509480000, \"value\": 27.5 },\n                { \"time\": 1509483600, \"value\": 27 },\n                { \"time\": 1509487200, \"value\": 26.5 },\n                { \"time\": 1509490800, \"value\": 26.4 },\n                { \"time\": 1509494400, \"value\": 26.4 },\n                { \"time\": 1509498000, \"value\": 26.4 },\n                { \"time\": 1509501600, \"value\": 26.5 },\n                { \"time\": 1509505200, \"value\": 26.8 },\n                { \"time\": 1509508800, \"value\": 27 },\n                { \"time\": 1509512400, \"value\": 27.5 },\n                { \"time\": 1509516000, \"value\": 28 },\n                { \"time\": 1509519600, \"value\": 28.5 },\n                { \"time\": 1509523200, \"value\": 29 },\n                { \"time\": 1509526800, \"value\": 29.5 },\n                { \"time\": 1509530400, \"value\": 30 },\n                { \"time\": 1509534000, \"value\": 30.5 },\n                { \"time\": 1509537600, \"value\": 31 },\n                { \"time\": 1509541200, \"value\": 31.5 },\n                { \"time\": 1509544800, \"value\": 32 },\n                { \"time\": 1509548400, \"value\": 32.5 },\n                { \"time\": 1509552000, \"value\": 33 },\n                { \"time\": 1509555600, \"value\": 33.5 },\n                { \"time\": 1509559200, \"value\": 34 },\n                { \"time\": 1509562800, \"value\": 34.5 },\n                { \"time\": 1509566400, \"value\": 35 },\n                { \"time\": 1509570000, \"value\": 35 },\n                { \"time\": 1509573600, \"value\": 35 },\n                { \"time\": 1509577200, \"value\": 35 },\n                { \"time\": 1509580800, \"value\": 35 }],\n            dtWindow: [1508814800000, 1510117200000],\n            width: 1200,\n            height: 50,\n            yRange: [18, 36],\n            label: \"CPB\",\n            colorString: \"#fffcec\",\n            areaChartBackgroundColor: \"#fff3e4\"\n        }\n\n        this.handleRemoveBtnCLick = this.handleRemoveBtnCLick.bind(this)\n    }\n\n    componentDidMount() {\n        let self = this\n        let firstTime = true\n        setInterval(function () {\n            self.simulateDataChange(firstTime)\n            firstTime = false\n        }, 100)\n    }\n\n    handleRemoveBtnCLick() {\n        let data = this.state.data\n        data = data.slice(0, -1)\n        this.setState({\n            ...this.state,\n            data: [\n                { name: \"Administered Medications\", time: 1456293058, type: \"Intake\", value: 1 },\n                { name: \"Blood Products\", time: 1456293058, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Urine Output\", time: 1456293058, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293058, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Continuous Medications\", time: 1456293058, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Blood Products\", time: 1456293060, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Urine Output\", time: 1456293060, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Continuous Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n            ],\n        })\n    }\n\n    handleSubmit = (e) => {\n        if (e) e.preventDefault()\n        const data = this.data.value\n        var jsonStr = data.replace(/(\\w+:)|(\\w+ :)/g, function (s) {\n            return '\"' + s.substring(0, s.length - 1) + '\":'\n        })\n\n        let json = JSON.parse(jsonStr)\n        let newData = this.state.data\n        newData.push(json)\n        this.setState({\n            data: [...this.state.data, json]\n        })\n    }\n\n    simulateDataChange(firstTime) {\n        let newMaxTime\n        if (firstTime) {\n            newMaxTime = (this.state.data[this.state.data.length - 1][\"time\"]) + 3600\n        } else {\n            newMaxTime = this.state.data[this.state.data.length - 1][\"time\"] + 3600\n        }\n\n        let newTemp = {\n            time: newMaxTime,\n            value: (Math.floor(Math.random() * 20) + 20)\n        }\n\n        let newData = this.state.data\n        newData = newData.slice(2)\n        newData.push(newTemp)\n\n        this.setState({\n            ...this.state,\n            data: [...newData, newTemp],\n            dtWindow: [this.state.data[0][\"time\"] * 1000, newMaxTime * 1000 - 3600000]\n        })\n    }\n\n    render() {\n        let { data, dtWindow, width, height, yRange, label, colorString, areaChartBackgroundColor } = this.state\n        let dataClone = [...data]\n\n        return (\n            <>\n                <div>Pass in data in the form: {' { time: 1509534000, value: 35 } '}</div>\n                <form onSubmit={this.handleSubmit}>\n                    <input style={{\n                        height: \"50px\",\n                        width: \"50%\",\n                        fontSize: \"14pt\"\n                    }} placeholder=\"data\" type=\"text\" ref={(element) => { this.data = element }} />\n                    <br></br>\n                    <button>ADD DATA</button>\n                </form>\n                <button onClick={this.handleRemoveBtnCLick}>REMOVE DATA</button>\n                <AreaChartBundle\n                    data={data}\n                    dtWindow={dtWindow}\n                    width={width}\n                    height={height}\n                    yRange={yRange}\n                    label={label}\n                    colorString={colorString}\n                    areaChartBackgroundColor={\"white\"} />\n                <div>\n                    {dataClone.reverse().map((d, i) => {\n                        return <div key={d.time + i}>{d.value}</div>\n                    })}\n                </div>\n            </>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}