{"version":3,"sources":["lib/PlotContainers/PlotContainers.js","lib/AreaChartLeftPanel.jsx","lib/PlottingUtils.js","lib/AreaChart.jsx","lib/AreaChartYAxis.jsx","lib/DateVerticalGridLines.js","lib/index.js","lib/AreaChartBundle.jsx","index.js"],"names":["PlotContainer","generateGridLayoutStyle","memoize_one","width","height","leftWidth","plotWidth","rightWidth","topHeight","plotHeight","bottomHeight","display","gridGap","gridTemplateColumns","gridTemplateRows","this","props","children","style","className","Component","PlotSubContainer","React","Children","map","child","AreaChartLeftPanel","canvasW","canvasH","panelHeight","panelWidth","label","styles","leftPanel","backgroundColor","colorString","areaChartLabel","marginLeft","lineHeight","color","fontWeight","fontFamily","PureComponent","toDomXCoord_Linear","minX","maxX","dataX","AreaChart","areaChartCanvas","refs","areaChartCtx","getContext","drawCPBChart","ctx","domX","canvas","dtWindow","data","yRange","lineWidth","strokeStyle","minMaxDiff","forEach","d","domY","minY","maxY","dataY","toDomYCoord_Linear","lineTo","stroke","length","fillStyle","fill","ref","AreaChartYAxis","areaChartYAxisCanvas","areaChartYAxisCtx","drawYAxis","moveTo","font","textBaseline","posDomY","fillText","position","DateVerticalGridLines","createRef","rest","draw","diffX","draw_memo","validFromDiffX","validToDiffX","rangeMinX","rangeMaxX","memo","generateDateGrids","grids","startIndex","Math","max","bisect_right","endIndex","min","bisect_left","domXs","slice","x","current","clearRect","globalAlpha","verticalLinePlot","beginPath","i","round","AreaChartBundle","filteredData","timeSet","Set","timeArr","filter","o","time","has","add","push","d0","d1","x0","Date","x1","setHours","areaChartBackgroundColor","minXInMSecs","maxXInMSecs","leftPanelGradShadow","top","left","LEFT_WIDTH","opacity","backgroundImage","mainPlotWrapDiv","zIndex","App","handleSubmit","e","preventDefault","jsonStr","value","replace","s","substring","json","JSON","parse","state","setState","handleRemoveBtnCLick","bind","self","firstTime","setInterval","simulateDataChange","name","type","newMaxTime","newTemp","floor","random","newData","dataClone","onSubmit","fontSize","placeholder","element","onClick","reverse","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.257bd741.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {memoize_one} from \"memoize\";\nimport \"./PlotContainers.css\";\n\nexport class PlotContainer extends Component{\n  render(){\n    let { children,width,height,\n          leftWidth,plotWidth,rightWidth,\n          topHeight,plotHeight,bottomHeight} = this.props;\n    let style = this.generateGridLayoutStyle( width,height,\n                                              leftWidth,plotWidth,rightWidth,\n                                              topHeight,plotHeight,bottomHeight);\n    return (\n      <div style={style} className=\"PlotContainers-positionRelative\">\n        {children}\n      </div>\n    )\n  }\n  \n  generateGridLayoutStyle = memoize_one((width,height,\n                          leftWidth,plotWidth,rightWidth,\n                          topHeight,plotHeight,bottomHeight)=>{\n    let style = { display:\"grid\",\n                  height:height,\n                  width:width,\n                  gridGap:0,\n                  gridTemplateColumns:`${leftWidth}px ${plotWidth}px ${rightWidth}px`,\n                  gridTemplateRows:`${topHeight}px ${plotHeight}px ${bottomHeight}px`\n                  };\n    return style;\n  })\n}\n\nexport const PlotSubContainer = (props)=>{\n  return (\n    <div className=\"PlotContainers-positionRelative\">\n      { props.children ? \n        React.Children.map(props.children,(child)=>\n          <div className=\"PlotContainers-positionAbsolute\">\n            {child}\n          </div>) :\n        null\n        }\n    </div>\n  );\n}\n\n","import React, { PureComponent } from \"react\";\n// import \"./TempChartLeftPanel.css\"\n\nclass AreaChartLeftPanel extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.canvasW\n        this.canvasH = this.props.canvasH\n    }\n\n    render() {\n        let { panelHeight, panelWidth, label, colorString } = this.props\n\n        const styles = {\n            leftPanel: {\n                height: panelHeight + \"px\",\n                width: panelWidth + \"px\",\n                backgroundColor: colorString\n            },\n            areaChartLabel: {\n                marginLeft: \"20px\",\n                lineHeight: panelHeight + \"px\",\n                color: '#373c62',\n                fontWeight: '800',\n                fontFamily: 'MuseoSans, Sans'\n            }\n        }\n\n        return (\n            <div className=\"area-chart-left-panel\"\n                style={styles.leftPanel}>\n                <div className=\"area-chart-label\"\n                    style={styles.areaChartLabel}> {label} </div>\n            </div>\n        )\n    }\n}\n\nexport default AreaChartLeftPanel","//height: canvas px\n// minY: lowest value\n// maxY: highest value\n// dataY: value\nexport function toDomYCoord_Linear(height, minY, maxY, dataY) {\n    return height - (dataY - minY) / ((maxY - minY) / height);\n}\n\nexport function fromDomYCoord_Linear(height, minY, maxY, domY) {\n    return (height - domY) * ((maxY - minY) / height) + minY;\n}\n\nexport function toDomXCoord_Linear(width, minX, maxX, dataX) {\n    return (dataX - minX) / ((maxX - minX) / width);\n}\n\nexport function fromDomXCoord_Linear(width, minX, maxX, domX) {\n    return domX * ((maxX - minX) / width) + minX;\n}","import React, { PureComponent } from \"react\";\n// import \"./TempChart.css\"\nimport {\n    toDomYCoord_Linear,\n    toDomXCoord_Linear,\n    fromDomXCoord_Linear\n} from \"./PlottingUtils\"\n\nclass AreaChart extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.width\n        this.canvasH = this.props.height\n    }\n\n    componentDidMount() {\n        this.areaChartCanvas = this.refs.areaChartCanvas\n        this.areaChartCtx = this.areaChartCanvas.getContext(\"2d\")\n        this.drawCPBChart(this.areaChartCtx)\n    }\n\n    componentDidUpdate() {\n        this.drawCPBChart(this.areaChartCtx)\n    }\n\n    drawCPBChart(ctx) {\n        // let { minX, maxX, minY, maxY, data } = this.props\n        ctx.canvas.width = ctx.canvas.width\n        let domX\n        let minX = this.props.dtWindow[0] / 1000\n        let maxX = this.props.dtWindow[1] / 1000\n        let height = this.canvasH\n        let data = this.props.data\n        let yRange = this.props.yRange\n\n        // first plot the stroke\n        ctx.lineWidth = 2\n        ctx.strokeStyle = \"rgba(128,128,128,0.7)\"\n        let minMaxDiff = yRange[1] - yRange[0]\n        data.forEach(d => {\n            domX = toDomXCoord_Linear(this.canvasW, minX, maxX, d[\"time\"])\n            let domY = toDomYCoord_Linear(this.canvasH, yRange[0] - minMaxDiff * 0.3, yRange[1] + minMaxDiff * 0.4, d[\"value\"])\n            ctx.lineTo(domX, domY)\n        })\n        ctx.stroke()\n            // now define the bottom of the filled area\n        const maxY = height //Math.max.apply(null, pts.map(pt=>pt.y));\n            // draw the missing parts\n        domX = toDomXCoord_Linear(this.canvasW, minX, maxX, data[data.length - 1][\"time\"])\n        ctx.lineTo(domX, maxY) // bottom-right\n        domX = toDomXCoord_Linear(this.canvasW, minX, maxX, data[0][\"time\"])\n        ctx.lineTo(domX, maxY) // bottom-left\n        ctx.fillStyle = \"rgba(192,192,192,0.4)\"\n        ctx.fill() // will close the path for us\n    }\n\n    render() {\n        // let minXInSecs = minX / 1000, maxXInSecs = maxX / 1000\n        return ( \n            <canvas className = \"area-chart-canvas\"\n            ref = \"areaChartCanvas\"\n            width = { this.canvasW }\n            height = { this.canvasH }\n            />\n        )\n    }\n}\n\nexport default AreaChart","import React, { PureComponent } from \"react\";\n\nclass AreaChartYAxis extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.canvasW\n        this.canvasH = this.props.canvasH\n        this.minY = this.props.minY\n        this.maxY = this.props.maxY\n    }\n\n    componentDidMount() {\n        this.areaChartYAxisCanvas = this.refs.areaChartYAxisCanvas\n        this.areaChartYAxisCtx = this.areaChartYAxisCanvas.getContext(\"2d\")\n        this.drawYAxis(this.areaChartYAxisCtx);\n    }\n\n    componentDidUpdate() {\n        this.minY = this.props.minY\n        this.maxY = this.props.maxY\n        this.drawYAxis(this.areaChartYAxisCtx);\n    }\n\n    toDomYCoord_Linear(height, minY, maxY, dataY) {\n        return height - (dataY - minY) / ((maxY - minY) / height);\n    }\n\n    drawYAxis(ctx) {\n        let yRange = this.props.yRange\n        // clear canvas\n        ctx.canvas.width = ctx.canvas.width\n\n        // draw the y-axis line\n        ctx.lineWidth = 3\n        ctx.moveTo(this.canvasW, 5)\n        ctx.lineTo(this.canvasW, this.canvasH - 5)\n        ctx.stroke()\n\n        // label styling\n        ctx.font = \"600 14px MuseoSans, Sans\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = '#373c62'\n\n        let minMaxDiff = yRange[1] - yRange[0]\n        let xOffset = 25\n\n        // draw the label\n        let posDomY = this.toDomYCoord_Linear(this.canvasH, yRange[0] - minMaxDiff * 0.3, yRange[1] + minMaxDiff * 0.4, yRange[0])\n        ctx.fillText(yRange[0], this.canvasW - xOffset, posDomY)\n        posDomY = this.toDomYCoord_Linear(this.canvasH, yRange[0] - minMaxDiff * 0.3, yRange[1] + minMaxDiff * 0.4, yRange[1])\n        ctx.fillText(yRange[1], this.canvasW - xOffset, posDomY)\n        ctx.stroke()\n    }\n\n    render() {\n        const styles = {\n            canvas: {\n                position: \"absolute\"\n            }\n        }\n\n        return (\n            <canvas\n                className=\"area-chart-y-axis\"\n                ref=\"areaChartYAxisCanvas\"\n                style={styles.canvas}\n                width={this.canvasW}\n                height={this.canvasH}\n            />\n        )\n    }\n}\n\nexport default AreaChartYAxis","import React, { PureComponent } from \"react\";\nimport { bisect_left, bisect_right } from \"bisect\";\nimport { toDomXCoord_Linear, generateDateGrids } from \"plot-utils\";\n\nclass DateVerticalGridLines extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n\n    render() {\n        let {\n            width,\n            height,\n            minX,\n            maxX,\n            ...rest\n        } = this.props;\n        return ( < canvas ref = { this.ref } width = { width } height = { height } {...rest } > </canvas>\n        );\n    }\n\n    componentDidMount() {\n        this.draw();\n    }\n\n    componentDidUpdate() {\n        this.draw();\n    }\n\n    draw() {\n        let { minX, maxX, width } = this.props;\n        let diffX = maxX - minX;\n        // Generate grid if needed\n        this.draw_memo = this.draw_memo || { validFromDiffX: 0, validToDiffX: -1, rangeMinX: 0, rangeMaxX: -1 };\n        let memo = this.draw_memo;\n        if (memo.validFromDiffX > diffX ||\n            diffX > memo.validToDiffX ||\n            memo.rangeMinX > minX ||\n            maxX > memo.rangeMaxX\n        ) {\n            memo.rangeMinX = minX - 10 * diffX;\n            memo.rangeMaxX = maxX + 10 * diffX;\n            let { grids, validFromDiffX, validToDiffX } = generateDateGrids(minX, maxX, memo.rangeMinX, memo.rangeMaxX);\n            memo.validFromDiffX = validFromDiffX;\n            memo.validToDiffX = validToDiffX;\n            memo.grids = grids;\n        }\n        // Filter\n        let startIndex = Math.max(0, bisect_right(memo.grids, minX));\n        let endIndex = Math.min(memo.grids.length - 1, bisect_left(memo.grids, maxX));\n        let domXs = memo.grids.slice(startIndex, endIndex + 1).map((x) => toDomXCoord_Linear(width, minX, maxX, x));\n        // Draw\n        let canvas = this.ref.current;\n        let ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, width, 400);\n        ctx.globalAlpha = 0.1;\n        this.verticalLinePlot(ctx, width, 400, domXs);\n    }\n\n    verticalLinePlot(ctx, width, height, domXs) {\n        let x = null;\n        let c = null;\n        ctx.beginPath();\n        for (let i = 0; i < domXs.length; i++) {\n            x = Math.round(domXs[i]);\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, height);\n        }\n        ctx.stroke();\n    }\n}\n\nexport default DateVerticalGridLines;","import AreaChartBundle from \"./AreaChartBundle\";\nexport default AreaChartBundle;","import React, { PureComponent } from \"react\";\n// import \"./TempChartLeftPanel.css\"\nimport { PlotContainer, PlotSubContainer } from \"./PlotContainers/PlotContainers\";\nimport AreaChartLeftPanel from \"./AreaChartLeftPanel\";\nimport AreaChart from \"./AreaChart\";\nimport AreaChartYAxis from \"./AreaChartYAxis\";\nimport DateVerticalGridLines from \"./DateVerticalGridLines\";\nimport PropTypes from 'prop-types';\n\nconst minY = 0;\nconst maxY = 200;\nconst LEFT_WIDTH = 200\nconst RIGHT_WIDTH = 0\nconst TOP_HEIGHT = 0\nconst BOTTOM_HEIGHT = 0\n\nclass AreaChartBundle extends PureComponent {\n    filterDataToDtWindow(data) {\n        let minX = this.props.dtWindow[0] / 1000\n        let maxX = this.props.dtWindow[1] / 1000\n        let filteredData = data\n        let timeSet = new Set()\n        let timeArr = []\n\n        if (data) {\n            if (minX) {\n                // filter out the data that is within the dtWindow range\n                filteredData = filteredData.filter(function (o) {\n                    if (o.time <= maxX && o.time >= minX) {\n                        if (!timeSet.has(o.time)) {\n                            timeSet.add(o.time)\n                            timeArr.push(o.time)\n                        }\n                    }\n                    return o.time <= maxX && o.time >= minX\n                })\n            }\n        }\n\n        return [filteredData, timeArr]\n    }\n\n    // unix time in ms\n    getDaysBetweenDates(d0, d1) {\n        var msPerDay = 8.64e7\n\n        // Copy dates so don't mess them up\n        var x0 = new Date(d0)\n        var x1 = new Date(d1)\n\n        // Set to noon - avoid DST errors\n        x0.setHours(12, 0, 0)\n        x1.setHours(12, 0, 0)\n\n        // Round to remove daylight saving errors\n        return Math.round((x1 - x0) / msPerDay)\n    }\n\n    render() {\n        let { dtWindow, width, height, yRange, data, label, colorString, areaChartBackgroundColor } = this.props\n        let plotWidth = width - LEFT_WIDTH - RIGHT_WIDTH\n        let plotHeight = height - TOP_HEIGHT - BOTTOM_HEIGHT\n        let minXInMSecs = 0, maxXInMSecs = 0\n\n        if (dtWindow) {\n            minXInMSecs = dtWindow[0]\n            maxXInMSecs = dtWindow[1]\n        }\n\n        const styles = {\n            leftPanelGradShadow: {\n                position: \"absolute\",\n                top: 0,\n                left: LEFT_WIDTH - 52,\n                height: height,\n                width: 70,\n                opacity: 1,\n                backgroundImage: \"linear-gradient(to right, black, rgba(255,255,255,0))\"\n            },\n            mainPlotWrapDiv: {\n                zIndex: -1,\n                backgroundColor: areaChartBackgroundColor\n            }\n        }\n        // data = this.filterDataToDtWindow(data)\n\n        return (\n            <PlotContainer width={width} height={height}\n                leftWidth={LEFT_WIDTH} plotWidth={plotWidth} rightWidth={RIGHT_WIDTH}\n                topHeight={TOP_HEIGHT} plotHeight={plotHeight} bottomHeight={BOTTOM_HEIGHT} >\n                {/*Row TOP*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Row PLOT*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                    <div style={styles.leftPanelGradShadow}>\n                    </div>\n                    <AreaChartLeftPanel label={label} colorString={colorString} panelWidth={LEFT_WIDTH} panelHeight={height} />\n                    <AreaChartYAxis canvasH={height} canvasW={LEFT_WIDTH} yRange={yRange} />\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n                <div style={styles.mainPlotWrapDiv}>\n                    <PlotSubContainer>\n                        {/* Main plot area interaction */}\n                        <DateVerticalGridLines width={plotWidth} height={plotHeight} minX={minXInMSecs} maxX={maxXInMSecs} />\n                        <AreaChart data={data} yRange={yRange} width={plotWidth} height={plotHeight} dtWindow={dtWindow} />\n                    </PlotSubContainer>\n                </div>\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Row BOTTOM*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Other stuffs that ignore grid layut*/}\n            </PlotContainer>\n        )\n    }\n}\n\nAreaChartBundle.propTypes = {\n    data: PropTypes.array.isRequired,\n    dtWindow: PropTypes.array.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    yRange: PropTypes.array.isRequired,\n    label: PropTypes.string.isRequired,\n    colorString: PropTypes.string.isRequired,\n    areaChartBackgroundColor: PropTypes.string.isRequired\n}\n\nexport default AreaChartBundle","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport AreaChartBundle from \"./lib\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [\n                { \"time\": 1509426000, \"value\": 10 },\n                { \"time\": 1509429600, \"value\": 34.5 },\n                { \"time\": 1509433200, \"value\": 34 },\n                { \"time\": 1509436800, \"value\": 33.5 },\n                { \"time\": 1509440400, \"value\": 33 },\n                { \"time\": 1509444000, \"value\": 32.5 },\n                { \"time\": 1509447600, \"value\": 32 },\n                { \"time\": 1509451200, \"value\": 31.5 },\n                { \"time\": 1509454800, \"value\": 31 },\n                { \"time\": 1509458400, \"value\": 30.5 },\n                { \"time\": 1509462000, \"value\": 30 },\n                { \"time\": 1509465600, \"value\": 29.5 },\n                { \"time\": 1509469200, \"value\": 29 },\n                { \"time\": 1509472800, \"value\": 28.5 },\n                { \"time\": 1509476400, \"value\": 28 },\n                { \"time\": 1509480000, \"value\": 27.5 },\n                { \"time\": 1509483600, \"value\": 27 },\n                { \"time\": 1509487200, \"value\": 26.5 },\n                { \"time\": 1509490800, \"value\": 26.4 },\n                { \"time\": 1509494400, \"value\": 26.4 },\n                { \"time\": 1509498000, \"value\": 26.4 },\n                { \"time\": 1509501600, \"value\": 26.5 },\n                { \"time\": 1509505200, \"value\": 26.8 },\n                { \"time\": 1509508800, \"value\": 27 },\n                { \"time\": 1509512400, \"value\": 27.5 },\n                { \"time\": 1509516000, \"value\": 28 },\n                { \"time\": 1509519600, \"value\": 28.5 },\n                { \"time\": 1509523200, \"value\": 29 },\n                { \"time\": 1509526800, \"value\": 29.5 },\n                { \"time\": 1509530400, \"value\": 30 },\n                { \"time\": 1509534000, \"value\": 30.5 },\n                { \"time\": 1509537600, \"value\": 31 },\n                { \"time\": 1509541200, \"value\": 31.5 },\n                { \"time\": 1509544800, \"value\": 32 },\n                { \"time\": 1509548400, \"value\": 32.5 },\n                { \"time\": 1509552000, \"value\": 33 },\n                { \"time\": 1509555600, \"value\": 33.5 },\n                { \"time\": 1509559200, \"value\": 34 },\n                { \"time\": 1509562800, \"value\": 34.5 },\n                { \"time\": 1509566400, \"value\": 35 },\n                { \"time\": 1509570000, \"value\": 35 },\n                { \"time\": 1509573600, \"value\": 35 },\n                { \"time\": 1509577200, \"value\": 35 },\n                { \"time\": 1509580800, \"value\": 35 }],\n            dtWindow: [1508814800000, 1510117200000],\n            width: 1200,\n            height: 50,\n            yRange: [4, 38],\n            label: \"CPB\",\n            colorString: \"#fffcec\",\n            areaChartBackgroundColor: \"#fff3e4\"\n        }\n\n        this.handleRemoveBtnCLick = this.handleRemoveBtnCLick.bind(this)\n    }\n\n    componentDidMount() {\n        let self = this\n        let firstTime = true\n        setInterval(function () {\n            self.simulateDataChange(firstTime)\n            firstTime = false\n        }, 100)\n    }\n\n    handleRemoveBtnCLick() {\n        let data = this.state.data\n        data = data.slice(0, -1)\n        this.setState({\n            ...this.state,\n            data: [\n                { name: \"Administered Medications\", time: 1456293058, type: \"Intake\", value: 1 },\n                { name: \"Blood Products\", time: 1456293058, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Urine Output\", time: 1456293058, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293058, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Continuous Medications\", time: 1456293058, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Blood Products\", time: 1456293060, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Urine Output\", time: 1456293060, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Continuous Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n            ],\n        })\n    }\n\n    handleSubmit = (e) => {\n        if (e) e.preventDefault()\n        const data = this.data.value\n        var jsonStr = data.replace(/(\\w+:)|(\\w+ :)/g, function (s) {\n            return '\"' + s.substring(0, s.length - 1) + '\":'\n        })\n\n        let json = JSON.parse(jsonStr)\n        let newData = this.state.data\n        newData.push(json)\n        this.setState({\n            data: [...this.state.data, json]\n        })\n    }\n\n    simulateDataChange(firstTime) {\n        let newMaxTime\n        if (firstTime) {\n            newMaxTime = (this.state.data[this.state.data.length - 1][\"time\"]) + 3600\n        } else {\n            newMaxTime = this.state.data[this.state.data.length - 1][\"time\"] + 3600\n        }\n\n        let newTemp = {\n            time: newMaxTime,\n            value: (Math.floor(Math.random() * 20) + 20)\n        }\n\n        let newData = this.state.data\n        newData = newData.slice(2)\n        newData.push(newTemp)\n\n        this.setState({\n            ...this.state,\n            data: [...newData, newTemp],\n            dtWindow: [this.state.data[0][\"time\"] * 1000, newMaxTime * 1000 - 3600000]\n        })\n    }\n\n    render() {\n        let { data, dtWindow, width, height, yRange, label, colorString, areaChartBackgroundColor } = this.state\n        let dataClone = [...data]\n\n        return (\n            <>\n                <div>Pass in data in the form: {' { time: 1509534000, value: 35 } '}</div>\n                <form onSubmit={this.handleSubmit}>\n                    <input style={{\n                        height: \"50px\",\n                        width: \"50%\",\n                        fontSize: \"14pt\"\n                    }} placeholder=\"data\" type=\"text\" ref={(element) => { this.data = element }} />\n                    <br></br>\n                    <button>ADD DATA</button>\n                </form>\n                <button onClick={this.handleRemoveBtnCLick}>REMOVE DATA</button>\n                <AreaChartBundle\n                    data={data}\n                    dtWindow={dtWindow}\n                    width={width}\n                    height={height}\n                    yRange={yRange}\n                    label={label}\n                    colorString={colorString}\n                    areaChartBackgroundColor={\"white\"} />\n                <div>\n                    {dataClone.reverse().map((d, i) => {\n                        return <div key={d.time + i}>{d.value}</div>\n                    })}\n                </div>\n            </>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}